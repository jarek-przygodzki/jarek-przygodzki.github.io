<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jarek Przygódzki&#39;s Blog</title>
    <link>https://jarekprzygodzki.dev/</link>
    <description>Recent content on Jarek Przygódzki&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jarekprzygodzki.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why is my Docker image so large?</title>
      <link>https://jarekprzygodzki.dev/post/why-is-my-docker-image-so-large/</link>
      <pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/why-is-my-docker-image-so-large/</guid>
      <description>Keeping Docker images as small as possible has a lot of practical benefits. But even when following best practices
 use stripped-down base image utilize multi-stage builds don&amp;rsquo;t install what you don&amp;rsquo;t need optimize build context minimize number of layers  some images end up being larger than they have to be inadvertently including files that are not necessary .
How to troubleshoot issues with image size? Image filesystem changes are tracked in layers.</description>
    </item>
    
    <item>
      <title>A curious case of slow Docker image builds</title>
      <link>https://jarekprzygodzki.dev/post/a-curious-case-of-slow-docker-image-builds/</link>
      <pubDate>Fri, 31 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/a-curious-case-of-slow-docker-image-builds/</guid>
      <description>Investigating slow Docker image builds A rather short but hopefully interesting troubleshooting story that happened recently.
Lately, I was investigating a case of slow Docker image builds on CI server (Oracle Linux 7.5 with Docker devicemapper storage driver in direct-lvm mode). Each operation which altered layers (ADD, COPY, RUN) took up to 20 seconds - the larger the image, the longer.
A typical way of dealing with with apparently stuck program is collecting thread stack traces.</description>
    </item>
    
    <item>
      <title>Generating JVM memory dumps from JRE</title>
      <link>https://jarekprzygodzki.dev/post/generating-jvm-memory-dumps-from-jre/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/generating-jvm-memory-dumps-from-jre/</guid>
      <description>Generating JVM memory dumps from JRE on Linux/Windows/OSX Generating a JVM heap memory dump with JDK is straightforward as almost every Java developer knows about jmap and jcmd tools that come with the JDK. But what about JRE?
Some people think you need JDK, or at least part of it, but that&amp;rsquo;s not true. The answer lies in jattach, a tool to send commands to JVM via Dynamic Attach mechanism created by JVM hacker Andrei Pangin (@AndreiPangin).</description>
    </item>
    
    <item>
      <title>Install Ca Certificate for Docker Registry on Local Boot2docker Vm</title>
      <link>https://jarekprzygodzki.dev/post/install-ca-certificate-for-docker-registry-on-local-boot2docker-vm/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/install-ca-certificate-for-docker-registry-on-local-boot2docker-vm/</guid>
      <description>Annoyingly often internal Docker registries are secured with certificates signed by company&amp;rsquo;s own PKI or enterprise IT does a MitM to replace all HTTPS certs.
Commonly, company&amp;rsquo;s root CA certificate is installed by IT on developers machines and servers, but not on VMs run by developers on their own machines. When using Docker with local VMs like boot2docker, do we need to install the company root CA certificate on the VM to avoid x509: certificate signed by unknown authority errors.</description>
    </item>
    
    <item>
      <title>Publishing a port from a running Docker container</title>
      <link>https://jarekprzygodzki.dev/post/publishing-a-port-from-a-running-docker-container/</link>
      <pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/publishing-a-port-from-a-running-docker-container/</guid>
      <description>It’s not obvious, but it’s possible to publish an additional port from a running Docker container.
Note: Assuming container is attached to user-defined bridge network or default bridge network. Publishing ports doesn’t make sense with MacVLAN or IPVLAN since then every container has a uniquely routable IP address and can offer service on any port.
What can we do to make container port externally accessible? One possibile solution is to exploit the fact that communication between containers inside the same bridge network is switched at layer 2 and they can communiate with each other without any restrictions (unless ICC is disabled, that is).</description>
    </item>
    
    <item>
      <title>Monitorowanie i przechwytywanie ruchu sieciowego kontenerów Dockera</title>
      <link>https://jarekprzygodzki.dev/post/monitorowanie-i-przechwytywanie-ruchu-sieciowego-kontenerow-docker/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/monitorowanie-i-przechwytywanie-ruchu-sieciowego-kontenerow-docker/</guid>
      <description>Ten wpis to krótki tutorial jak przechwycić ruch sieciowych z wybranych kontenerów Dockera, np. usług uruchomionych w ramach klastra Docker Swarm.
Na początek minimum teorii. Docker używa przestrzeni nazw w celu zapewnienia izolacji procesów. Przestrzenie nazw (których od jądra 4.10 jest 7 rodzajów) są cechą jądra systemu Linux, która pozwala na izolację i wirtualizację zasobów systemowych. Funkcja przestrzeni nazw jest taka sama dla każdego typu: każdy proces jest powiązany z przestrzenią nazw danego rodzaju i może wykorzystywać zasoby powiązane z tą przestrzenią, oraz, w stosownych przypadkach, przestrzeniami nazw potomków.</description>
    </item>
    
    <item>
      <title>Debugging any JVM in a Docker container</title>
      <link>https://jarekprzygodzki.dev/post/debugging-any-jvm-in-a-docker-container/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/debugging-any-jvm-in-a-docker-container/</guid>
      <description>Thanks to JAVA_TOOL_OPTIONS variable it’s easy to run any JVM-based Docker image in debug mode. All we have to do is add environment variable definition JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 in docker run or docker-compose.yml and expose port to connect debugger.
# docker run -e &amp;quot;JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005&amp;quot; \ -p 5005:5005 # docker-compose environment: - &amp;quot;JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005&amp;quot; ports: - 5005:5005  If it&amp;rsquo;s possible, it&amp;rsquo;s handy to extend application entrypoint
# Set debug options if required if [ x&amp;quot;${JAVA_ENABLE_DEBUG}&amp;quot; !</description>
    </item>
    
    <item>
      <title>On why and how to exit JVM on OnOutOfMemoryError </title>
      <link>https://jarekprzygodzki.dev/post/on-why-and-how-exit-jvm-on-onoutofmemoryerror/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/on-why-and-how-exit-jvm-on-onoutofmemoryerror/</guid>
      <description>For a long time all my JVM-based Docker images were configured to exit on OOM error with -XX:OnOutOfMemoryError=”kill -9 %p” (%p is the current JVM process PID placeholder). It works well with XX:+HeapDumpOnOutOfMemoryError, because JVM will dump heap first, and then execute OnOutOfMemoryError command (see the relevant code in vm/utilities/debug.cpp). But with version 8u92 there’s now a JVM option in the JDK to make the JVM exit when an OutOfMemoryError occurs:</description>
    </item>
    
    <item>
      <title>Running Linux graphical applications in Docker on Windows with Cygwin/X</title>
      <link>https://jarekprzygodzki.dev/post/running-linux-graphical-applications-in-docker-on-windows-with-cygwinx/</link>
      <pubDate>Tue, 11 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/running-linux-graphical-applications-in-docker-on-windows-with-cygwinx/</guid>
      <description>Install Babun Cygwin is a great tool, but not the easiest to install. Babun consists of a pre-configured Cygwin that does not interfere with existing Cygwin installation.
Download the dist file from http://babun.github.io, unzip it and run the install.bat script. After a few minutes the application will be installed to the %USERPROFILE%\.babun directory. You can use the /target (or /t) option to install babun to a custom directory.
Install Cygwin/X Run pact from babun shell (pact is a babun package manager )</description>
    </item>
    
    <item>
      <title>JVM in Docker and PTRACE_ATTACH</title>
      <link>https://jarekprzygodzki.dev/post/jvm-in-docker-and-ptrace_attach/</link>
      <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/jvm-in-docker-and-ptrace_attach/</guid>
      <description>Docker nowadays (since 1.10, the original pull request is here docker/docker/#17989) adds some security to running containers by wrapping them in both AppArmor (or presumably SELinux on RedHat systems) and seccomp eBPF based syscall filters (here’s a nice article about it). And ptrace is disabled in the default seccomp profile.
$ docker run alpine sh -c &#39;apk add -U strace &amp;amp;&amp;amp; strace echo&#39; fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz (1/1) Installing strace (4.</description>
    </item>
    
    <item>
      <title>Single-file Play Framework application with Ammonite</title>
      <link>https://jarekprzygodzki.dev/post/single-file-play-framework-application-with-ammonite/</link>
      <pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/single-file-play-framework-application-with-ammonite/</guid>
      <description>Single-file Play Framework application with Ammonite courtesy of Li Haoyi ‏@li_haoyi
/** * Single-file play framework application! Make sure everything * works, as this is the test case that un-earthed #371 */ load.ivy(&amp;quot;com.typesafe.play&amp;quot; %% &amp;quot;play&amp;quot; % &amp;quot;2.5.0&amp;quot;) load.ivy(&amp;quot;com.typesafe.play&amp;quot; %% &amp;quot;play-netty-server&amp;quot; % &amp;quot;2.5.0&amp;quot;) load.ivy(&amp;quot;org.scalaj&amp;quot; %% &amp;quot;scalaj-http&amp;quot; % &amp;quot;2.2.1&amp;quot;) @ import play.core.server._, play.api.routing.sird._, play.api.mvc._ import scalaj.http._ val server = NettyServer.fromRouter(new ServerConfig( rootDir = new java.io.File(&amp;quot;.&amp;quot;), port = Some(19000), sslPort = None, address = &amp;quot;0.</description>
    </item>
    
    <item>
      <title>Play! Framework – część I</title>
      <link>https://jarekprzygodzki.dev/post/play-framework-czesc-i/</link>
      <pubDate>Tue, 12 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/play-framework-czesc-i/</guid>
      <description>Z związku z moim zainteresowaniem Scalą i Akką naturalnym jest zajęcie się ostatnim elementem stosu reaktywnych technologii dla JVM od Typesafe – frameworkiem Play. Niniejszy wpis stanowi, mam nadzieję, pierwszy z serii wpisów opisujących moją przygodę z tym frameworkiem.
Czym jest Play? Play jest moim zdaniem najlepszym frameworkiem ogólnego przeznaczenia dla JVM Ogólnie rzeczy ujmując Play to implementacja wzorca MVC w oparciu o model aktów Akka połączona ze środowiskiem do zarządzania projektem i uruchamiania go</description>
    </item>
    
    <item>
      <title>Scala partial function literal</title>
      <link>https://jarekprzygodzki.dev/post/scala-partial-function-literal/</link>
      <pubDate>Mon, 27 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/scala-partial-function-literal/</guid>
      <description>In Scala there’s no literal for partial function types. You have to give the exact signature of the PartialFunction
val pf: PartialFunction[Double, Double] = { case x if x &amp;gt;= 0 =&amp;gt; Math.sqrt(x) }  Though I personally prefer to use type ascription bacause you can define and lift in the same place if needed.
val pf = { case x if x &amp;gt;= 0 =&amp;gt; Math.sqrt(x) } : PartialFunction[Double, Double]  It’s unwieldy, but I’ve learned to live with it.</description>
    </item>
    
    <item>
      <title>Changing the directory for Vagrant boxes</title>
      <link>https://jarekprzygodzki.dev/post/changing-the-directory-for-vagrant-boxes/</link>
      <pubDate>Tue, 21 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/changing-the-directory-for-vagrant-boxes/</guid>
      <description>The successfully downloaded Vagrant boxes are located at ~/.vagrant.d/boxes on Mac/Linux System and %USERPROFILE%/.vagrant.d/boxes on Windows. This can be changed by setting an environment variable named VAGRANT_HOME to specify the location of .vagrant.d, as in VAGRANT_HOME=F:\.vagrant.d
# Windows # current terminal session set VAGRANT_HOME=F:\.vagrant.d # current user environment setx VAGRANT_HOME F:\.vagrant.d # system wide environment setx VAGRANT_HOME F:\.vagrant.d /M  VAGRANT_HOME is documented here along with other interesting options.</description>
    </item>
    
    <item>
      <title>Monitoring WildFly Using BTrace</title>
      <link>https://jarekprzygodzki.dev/post/monitoring-wildfly-using-btrace/</link>
      <pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/monitoring-wildfly-using-btrace/</guid>
      <description>Today I was hoping to use BTrace to track a rather anoying bug in web application running inside WildFly application server. I’ve used BTrace some times in the past and my experience was nothing but positive. Until today, that is.
Probe deployment caused a myriad of exceptions inside application server coming from instrumented classes and all caused by missing btrace runtime. The classloader separation of the AS getting in my way!</description>
    </item>
    
    <item>
      <title>My favorite features of Scala – part I</title>
      <link>https://jarekprzygodzki.dev/post/my-favorite-features-of-scala-part-i/</link>
      <pubDate>Wed, 29 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/my-favorite-features-of-scala-part-i/</guid>
      <description>During the last few months I’ve spent substantial amount of free time learning Scala and consider it time well spent. This article is first part describing my favorite features of Scala
Extractor Objects Whenever you define a val or var, what comes after the keyword is not simply an identifier but rather a pattern.
val regex = &amp;quot;(\\d+)/(\\d+)/(\\d+)&amp;quot;.r val regex(year, month, day) = &amp;quot;2015/7/29&amp;quot;  The val regex is an instance of Regex, and when you use it in a pattern, you’re implicitly calling regex.</description>
    </item>
    
    <item>
      <title>Kto wywołuje System.gc() ?</title>
      <link>https://jarekprzygodzki.dev/post/kto-wywoluje-system-gc/</link>
      <pubDate>Thu, 25 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/kto-wywoluje-system-gc/</guid>
      <description>Każdy, kto miał do czynienia z aplikacjami Javy których rozmiar sterty liczy się w gigabajtach wie, że jedną z rzeczy których należy unikać jak ognia jest tzw. odśmiecanie pełne (Full GC). W większości przypadków można to osiągnąć przez rozważny wybór algorytmu GC i staranne dobranie jego parametrów. Nie rozwiązuje to jednak przypadku, gdy cykl pełnego odśmiecania wyzwalany jest przez jawne wywołanie System.gc() co manifestuje się wpisami w logach procesu odśmiecania zaczynających się od Full GC (System) (HotSpot) lub &amp;lt;sys&amp;gt; (IBM J9).</description>
    </item>
    
    <item>
      <title>ECJ – Eclipse Compiler for Java</title>
      <link>https://jarekprzygodzki.dev/post/ecj-eclipse-compiler-for-java/</link>
      <pubDate>Mon, 17 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jarekprzygodzki.dev/post/ecj-eclipse-compiler-for-java/</guid>
      <description>Nie wszyscy o tym wiedzą, ale Eclipse dostarcza i używa własnego kompilatora Javy – ECJ – zamiast standardowego javac. Kompilator umieszczony jest w plug-inie JDT Core i dostępny zarówno jako cześć Eclipse IDE for Java Developers jak i jako samodzielna aplikacja do wykorzystania zarówno z linii poleceń jak i programistycznego. Dlaczego ECJ jest tak interesujący? Jak pisze Wayner &amp;gt; It does wonderful things. My personal favourite thing about the Eclipse Java compiler is the fact that it will compile code that contains errors.</description>
    </item>
    
  </channel>
</rss>